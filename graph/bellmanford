#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
#include<string.h>
struct Graph
{
  int V,E;
  struct Edge* edge;
};

struct Edge
{
    int src,dest,weight;    
};

struct Graph* createGraph(int v, int e)
{
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V= v;
    graph->E =e;
    graph->edge = (struct Edge*)malloc(e * sizeof(struct Edge));
    return graph;
}


void printBellman(int cost[],struct Graph* graph)
{
    for(int i=0;i<graph->V;i++)
    {
        printf("to %d with cost %d\n",i,cost[i]);
    }
}

bellmanFord(struct Graph* graph, int src)
{
    int cost[graph->V];
    //memset(cost,INT_MAX,graph->V * sizeof(int));
   for(int i=0;i<graph->V;i++)
    {
    	cost[i]=INT_MAX;
    }
    cost[src]=0;
    for(int i=0;i<(graph->V)-1;i++)
    {
        for(int j=0;j<graph->E;j++)
        {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int w = graph->edge[j].weight;
            if( cost[u] + w < cost[v])
            {
                cost[v] = cost[u] + w;
            }
        }
    }
    
   for(int j=0;j<graph->E;j++)
    {
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int w = graph->edge[j].weight;
            if(cost[u] + w < cost[v])
            {
                 printf("Cycle Exists");
                 return;
            }
    }
    
    
    printBellman(cost,graph);
}

void main()
{   
    int V = 5,E=8;
    struct Graph* graph = createGraph(V,E);
    graph->edge[0].src = 0; 
    graph->edge[0].dest = 1; 
    graph->edge[0].weight = -1; 
  
    graph->edge[1].src = 0; 
    graph->edge[1].dest = 2; 
    graph->edge[1].weight = 4; 
  
    graph->edge[2].src = 1; 
    graph->edge[2].dest = 2; 
    graph->edge[2].weight = 3; 
  
    graph->edge[3].src = 1; 
    graph->edge[3].dest = 3; 
    graph->edge[3].weight = 2; 
  
    graph->edge[4].src = 1; 
    graph->edge[4].dest = 4; 
    graph->edge[4].weight = 2; 
  
    graph->edge[5].src = 3; 
    graph->edge[5].dest = 2; 
    graph->edge[5].weight = 5; 
  
    graph->edge[6].src = 3; 
    graph->edge[6].dest = 1; 
    graph->edge[6].weight = 1; 
  
    graph->edge[7].src = 4; 
    graph->edge[7].dest = 3; 
    graph->edge[7].weight = -3; 
  
    bellmanFord(graph,0);
}
